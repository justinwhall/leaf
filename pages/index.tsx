import { useQuery, useQueryClient } from '@tanstack/react-query';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';
import ArticleSingle from '@/components/article-single';
import Articles from '@/components/articles';
import Layout from '@/components/layout';
import { fetchNews, proxyRequest } from '@/services';
import { GetServerSideProps } from 'next';
import { Typography } from '@mui/material';
import { LOCALE_NAMES } from '@/constants';

export default function Home(
  { initialArticles, initialLocale }: { initialArticles: NewsResponse, initialLocale: string },
) {
  const [activeArticle, setActiveArticle] = useState<null | Article>(null);
  const { locale } = useRouter();

  const {
    data, isError, isFetching,
  } = useQuery(
    [locale],
    async () => fetchNews(`/api/news?locale=${locale as string}`),
    {
      // Don't refetch if we have it in cache.
      staleTime: 60 * 3000,
      cacheTime: 60 * 3000,
      initialData: initialLocale === locale ? initialArticles : undefined,
    },
  );

  return (
    <Layout loading={isFetching} error={isError}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Typography variant="h2" component="h1" gutterBottom>
        {' '}
        Top News in
        {' '}
        {LOCALE_NAMES[locale as string]}
        {' '}
      </Typography>

      {data?.articles && !activeArticle && (
        <Articles articles={data.articles} setActiveArticle={setActiveArticle} />
      )}

      {activeArticle && (
        <ArticleSingle article={activeArticle} setActiveArticle={setActiveArticle} />
      )}
    </Layout>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ locale }) => {
  // Server render the first page of articles
  const initialArticles = await proxyRequest(`/top-headlines?country=${locale as string}`);

  return {
    props: {
      initialArticles,
      initialLocale: locale,
    },
  };
};
