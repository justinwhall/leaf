import ArticleSingle from '@/components/article-single';
import Articles from '@/components/articles';
import Layout from '@/components/layout';
import { useDebounce } from '@/hooks';
import { fetchNews } from '@/services';
import {
  Box, CircularProgress, TextField, Typography,
} from '@mui/material';
import { useQuery } from '@tanstack/react-query';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';

export default function Search() {
  const [activeArticle, setActiveArticle] = useState<null | Article>(null);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const debouncedSearchQuery = useDebounce(searchQuery, 400);
  const { locale } = useRouter();
  const lang = ['us', 'gb'].includes(locale as string) ? 'en' : locale;

  const {
    data, isError, isFetching,
  } = useQuery(
    [locale, debouncedSearchQuery],
    async () => fetchNews(`/api/search?language=${lang}&q=${debouncedSearchQuery}`),
    {
      // Don't refetch if we have it in cache.
      enabled: debouncedSearchQuery.length > 0,
      staleTime: 60 * 60 * 1000,
      cacheTime: 60 * 60 * 1000,
    },
  );

  return (
    <Layout error={isError}>
      <Head>
        <title>Search</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box my={3} textAlign="center">
        <Typography variant="h2" component="h1">Search News</Typography>
        <TextField
          label="Search"
          type="text"
          variant="filled"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          sx={{ minWidth: 300 }}
        />
      </Box>

      {data?.articles && data.articles.length === 0 && (
        <Typography variant="h3">No results found</Typography>
      )}

      {isFetching && (
        <Box
          sx={{
            height: '30vh',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            width: '100%',
          }}
        >
          <CircularProgress />
        </Box>
      )}

      {data?.articles && !activeArticle && (
        <Articles articles={data.articles} setActiveArticle={setActiveArticle} />
      )}

      {activeArticle && (
        <ArticleSingle article={activeArticle} setActiveArticle={setActiveArticle} />
      )}
    </Layout>
  );
}
